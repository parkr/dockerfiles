#!/usr/bin/ruby

require "yaml"

PUBLISH_BRANCHES = ["main", "github-actions"]

projects = `git ls-files --directory -z */Dockerfile`.split("\0").each_with_object([]) do |file, projects|
  next if file.start_with?("homeassistant/")
  projects << File.dirname(file)
end
p projects

test_jobs = projects.each_with_object({}) do |project, jobs|
  jobs["Test_#{project}"] = {
    "name" => "Test #{project}",
    "runs-on" => "ubuntu-latest",
    "permissions" => {
      "actions" => "none",
      "checks" => "none",
      "contents" => "none",
      "deployments" => "none",
      "issues" => "none",
      "packages" => "write",
      "pull-requests" => "none",
      "repository-projects" => "none",
      "security-events" => "none",
      "statuses" => "none",
    },
    "steps" => [
      { "uses" => "actions/checkout@v2" },
      {
        "name" => "Test #{project}",
        "uses" => "parkr/actions/docker-make@main",
        "with" => {"args" => "test-#{project}"}
      },
    ],
  }
end

# On Push, test.
File.open(".github/workflows/push-build-test-on-push.yml", "wb") do |f|
  f.puts YAML.dump({
    "on" => "push",
    "name" => "Build & test on push",
    "jobs" => test_jobs,
  })
end

docker_login_job = proc { |env_prefix, registry|
  {
    "name" => "Docker Login",
    "uses" => "parkr/actions/docker-auth@main",
    "with" => { "args" => "login" },
    "env" => {
      "DOCKER_USERNAME" => "${{ secrets.#{env_prefix}_USERNAME }}",
      "DOCKER_PASSWORD" => "${{ secrets.#{env_prefix}_PASSWORD }}",
      "DOCKER_REGISTRY_URL" => registry,
    },
  }
}

docker_logout_job = proc { |registry|
  {
    "name" => "Docker Logout",
    "uses" => "parkr/actions/docker-auth@main",
    "with" => { "args" => "logout" },
    "env" => {
      "DOCKER_REGISTRY_URL" => registry,
    },
  }
}

cosign_secret_download_jobs = proc {
  {
    "name"  => "Download cosign key",
    "run"   => 'echo "$COSIGN_KEY" > cosign.key && cat cosign.key | wc -c',
    "shell" => "bash",
    "env"   => {"COSIGN_KEY" => '${{secrets.COSIGN_KEY}}'},
  }
}

cosign_secret_delete_jobs = proc {
  {
    "name" => "Delete cosign key",
    "run"  => "rm cosign.key",
  }
}

publish_docker_hub_jobs = projects.each_with_object({}) do |project, jobs|
  jobs["Publish_#{project}_to_Docker_Hub"] = {
    "name" => "Publish #{project} to Docker Hub",
    "runs-on" => "ubuntu-latest",
    "permissions" => {
      "actions" => "none",
      "checks" => "none",
      "contents" => "none",
      "deployments" => "none",
      "issues" => "none",
      "packages" => "write",
      "pull-requests" => "none",
      "repository-projects" => "none",
      "security-events" => "none",
      "statuses" => "none",
    },
    "steps" => [
      { "uses" => "actions/checkout@v2" },
      docker_login_job.call("DOCKER", "docker.io"),
      cosign_secret_download_jobs.(),
      {
        "name" => "Publish #{project}",
        "uses" => "parkr/actions/docker-make@main",
        "with" => {
          "args" => "publish-#{project} sign-#{project}",
          "cosign-password" => '${{secrets.COSIGN_KEY_PASSPHRASE}}',
        }
      },
      cosign_secret_delete_jobs.(),
      docker_logout_job.call("docker.io"),
    ],
  }
end

# On push to main branch, deploy to Docker Hub.
File.open(".github/workflows/push-publish-to-docker-hub-on-push-to-main.yml", "wb") do |f|
  f.puts YAML.dump({
    "on" => {"push" => {"branches" => PUBLISH_BRANCHES}},
    "name" => "Publish to Docker Hub on push to main",
    "jobs" => publish_docker_hub_jobs,
  })
end

publish_ghcr_jobs = projects.each_with_object({}) do |project, jobs|
  jobs["Publish_#{project}_to_GitHub_Container_Registry"] = {
    "name" => "Publish #{project} to GitHub Container Registry",
    "runs-on" => "ubuntu-latest",
    "permissions" => {
      "actions" => "none",
      "checks" => "none",
      "contents" => "none",
      "deployments" => "none",
      "issues" => "none",
      "packages" => "write",
      "pull-requests" => "none",
      "repository-projects" => "none",
      "security-events" => "none",
      "statuses" => "none",
    },
    "steps" => [
      { "uses" => "actions/checkout@v2" },
      docker_login_job.call("GPR", "ghcr.io"),
      cosign_secret_download_jobs.(),
      {
        "name" => "Publish #{project}",
        "uses" => "parkr/actions/docker-make@main",
        "with" => {
          "args" => "publish-#{project} sign-#{project} -e NAMESPACE=ghcr.io/parkr",
          "cosign-password" => '${{secrets.COSIGN_KEY_PASSPHRASE}}',
        }
      },
      cosign_secret_delete_jobs.(),
      docker_logout_job.call("ghcr.io"),
    ],
  }
end

# On push to main branch, deploy to Docker Hub.
File.open(".github/workflows/push-publish-to-ghcr-io-on-push-to-main.yml", "wb") do |f|
  f.puts YAML.dump({
    "on" => {"push" => {"branches" => PUBLISH_BRANCHES}},
    "name" => "Publish to Docker Hub on push to main",
    "jobs" => publish_ghcr_jobs,
  })
end

automatically_update_jobs = projects.each_with_object({}) do |project, jobs|
  next unless File.file?("#{project}/latest_version.sh")
  jobs["Update_#{project}_version"] = {
    "runs-on" => "ubuntu-latest",
    "steps" => [{
      "name" => "Update #{project} version",
      "uses" => "technote-space/create-pr-action@v2",
      "with" => {
        "EXECUTE_COMMANDS" => "bash #{project}/latest_version.sh",
        "COMMIT_MESSAGE"   => "Update #{project} version",
        "COMMIT_NAME"      => "GitHub Actions",
        "COMMIT_EMAIL"     => "actions@github.com",
        "PR_BRANCH_NAME"   => "version-update-#{project}-${PR_ID}",
        "PR_TITLE"         => "Update #{project} version",
        "PR_BODY"          => "A new version of #{project} is available. cc @parkr",
        "PR_BRANCH_PREFIX" => "update-automatically-",
      }
    }]
  }
end

# On a schedule, automatically update versions where supported.
File.open(".github/workflows/update-automatically.yml", "wb") do |f|
  f.puts YAML.dump({
    "on" => {
      "schedule" => [{"cron" => "0 0 * * *"}],
      "push" => {
        "branches" => ["update-automatically"]
      }
    },
    "name" => "Automatic Version Updates",
    "jobs" => automatically_update_jobs
  })
end
